---
import type { SlButton } from '@shoelace-style/shoelace';

interface Props extends Omit<SlButton, any> {
    title?: string;
    /** The button's theme variant. */
    variant?: 'default' | 'primary' | 'success' | 'neutral' | 'warning' | 'danger' | 'text';
    /** The button's size. */
    size?: 'small' | 'medium' | 'large';
    /** Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior. */
    caret?: boolean;
    /** Disables the button. */
    disabled?: boolean;
    /** Draws the button in a loading state. */
    loading?: boolean;
    /** Draws an outlined button. */
    outline?: boolean;
    /** Draws a pill-style button with rounded edges. */
    pill?: boolean;
    /**
     * Draws a circular icon button. When this attribute is present, the button expects a single `<sl-icon>` in the
     * default slot.
     */
    circle?: boolean;
    /**
     * The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native
     * `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.
     */
    type?: 'button' | 'submit' | 'reset';
    /**
     * The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.
     * This attribute is ignored when `href` is present.
     */
    name?: string;
    /**
     * The value of the button, submitted as a pair with the button's name as part of the form data, but only when this
     * button is the submitter. This attribute is ignored when `href` is present.
     */
    value?: string;
    /** When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`. */
    href?: string;
    /** Tells the browser where to open the link. Only used when `href` is present. */
    target?: '_blank' | '_parent' | '_self' | '_top';
    /**
     * When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the
     * default is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a
     * specific tab/window, this will prevent that from working correctly. You can remove or change the default value by
     * setting the attribute to an empty string or a value of your choice, respectively.
     */
    rel?: string;
    /** Tells the browser to download the linked file as this filename. Only used when `href` is present. */
    download?: string;
    /**
     * The "form owner" to associate the button with. If omitted, the closest containing form will be used instead. The
     * value of this attribute must be an id of a form in the same document or shadow root as the button.
     */
    form?: string;
    /** Used to override the form owner's `action` attribute. */
    formAction?: string;
    /** Used to override the form owner's `enctype` attribute.  */
    formEnctype?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';
    /** Used to override the form owner's `method` attribute.  */
    formMethod?: 'post' | 'get';
    /** Used to override the form owner's `novalidate` attribute. */
    formNoValidate?: boolean;
    /** Used to override the form owner's `target` attribute. */
    formTarget?: '_self' | '_blank' | '_parent' | '_top' | string;
};

const { variant, size, outline, pill, circle, href, target, caret, loading, disabled, type, name, value, rel, 
title, download, form, formAction, formEnctype, formMethod, formNoValidate, formTarget, ...rest } = Astro.props;
---

<sl-button 
    {variant} {size} {outline} {pill} {circle} 
    {href} {target} {caret} {loading} {disabled} 
    {type} {name} {value} {rel} {title} {download}
    {form} {formAction} {formEnctype} {formMethod}
    {formNoValidate} {formTarget} {...rest} >
    { 
        Astro.slots.has('prefix') && <slot slot="prefix" name="prefix"/> 
    }
    <slot />
    {
        Astro.slots.has('suffix') && <slot slot="suffix" name="suffix"/>
    }
</sl-button>

<script>
    import '@shoelace-style/shoelace/dist/components/button/button.js';
</script>