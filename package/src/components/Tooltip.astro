---
import type { SlTooltip } from '@shoelace-style/shoelace';

interface Props extends Omit<SlTooltip, any> {
    /** The tooltip's content. If you need to display HTML, use the `content` slot instead. */
    content?: string;
    /**
     * The preferred placement of the tooltip. Note that the actual placement may vary as needed to keep the tooltip
     * inside of the viewport.
     */
    placement?: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
    /** Disables the tooltip so it won't show when triggered. */
    disabled?: boolean;
    /** The distance in pixels from which to offset the tooltip away from its target. */
    distance?: number;
    /** Indicates whether or not the tooltip is open. You can use this in lieu of the show/hide methods. */
    open?: boolean;
    /** The distance in pixels from which to offset the tooltip along its target. */
    skidding?: number;
    /**
     * Controls how the tooltip is activated. Possible options include `click`, `hover`, `focus`, and `manual`. Multiple
     * options can be passed by separating them with a space. When manual is used, the tooltip must be activated
     * programmatically.
     */
    trigger?: string;
    /**
     * Enable this option to prevent the tooltip from being clipped when the component is placed inside a container with
     * `overflow: auto|hidden|scroll`. Hoisting uses a fixed positioning strategy that works in many, but not all,
     * scenarios.
     */
    hoist?: boolean;
} 

const { placement, disabled, distance, open, skidding, trigger, hoist, ...rest } = Astro.props;


---

<sl-tooltip 
    {placement} 
    {disabled} 
    {distance} 
    {open} 
    {skidding}
    {trigger}
    {hoist}
    {...rest}
    >
        <div slot="content">
            <slot name="content" />
        </div> 
    <slot />
</sl-tooltip>

<script>
    import '@shoelace-style/shoelace/dist/components/tooltip/tooltip.js';
</script>