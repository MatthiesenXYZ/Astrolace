---
import type { SlSwitch } from '@shoelace-style/shoelace';


interface Props extends Omit<SlSwitch, any> {
    /** The name of the switch, submitted as a name/value pair with form data. */
    name?: string;
    /** The current value of the switch, submitted as a name/value pair with form data. */
    value?: string;
    /** The switch's size. */
    size?: 'small' | 'medium' | 'large';
    /** Disables the switch. */
    disabled?: boolean;
    /** Draws the switch in a checked state. */
    checked?: boolean;
    /** The default value of the form control. Primarily used for resetting the form control. */
    defaultChecked?: boolean;
    /**
     * By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you to place the form control outside of a form and associate it with the form that has this `id`. The form must be in the same document or shadow root for this to work.
     */
    form?: string;
    /** Makes the switch a required field. */
    required?: boolean;
    /** The switch's help text. If you need to display HTML, use the `help-text` slot instead. */
    helpText?: string;
    /** The id for the swtich */
    id?: string;
}

const { checked, defaultChecked, disabled, form, helpText, name, required, size, value, id, ...rest } = Astro.props;
---
<sl-switch
    {checked}
    {defaultChecked}
    {disabled}
    {form}
    {helpText}
    {name}
    {required}
    {size}
    {value}
    {id}
    {...rest}
    >
    { Astro.slots.has('help-text') && (
            <div slot="help-text"><slot name="help-text"/></div>
    ) }
    <slot />
</sl-switch>

<script>
    import '@shoelace-style/shoelace/dist/components/switch/switch.js';
</script>
